/*
 * 86Box	A hypervisor and IBM PC system emulator that specializes in
 *		running old operating systems and software designed for IBM
 *		PC systems and compatibles from 1981 through fairly recent
 *		system designs based on the PCI bus.
 *
 *		This file is part of the 86Box distribution.
 *
 *		Jenkins build pipeline definition.
 *
 *
 *
 * Authors:	RichardG, <richardg867@gmail.com>
 *
 *		Copyright 2021 RichardG.
 */

def gitClone() {
	cleanWs()
	println env.GIT_COMMIT
	if (env.GIT_COMMIT == null)
		env.GIT_COMMIT = BRANCH
	def scmVars = git url: 'https://github.com/richardg867/86Box.git',
			  branch: env.GIT_COMMIT
	env.GIT_COMMIT = scmVars.GIT_COMMIT
}

def windowsBuild() {
	bat 'C:\\msys64\\msys2_shell.cmd -msys2 -defterm -here -no-start -c "exec .ci/build.sh"'
}

def unixBuild() {
	sh 'chmod u+x .ci/build.sh && .ci/build.sh'
}

def saveArtifacts() {
	archiveArtifacts artifacts: "${env.JOB_BASE_NAME}-*"
}

pipeline {
	agent any

	parameters {
		string(name: 'BUILD_TYPE',
		       defaultValue: 'beta', /* !!! CHANGE HERE !!! for build type */
		       description: 'Build type to pass on to CMake. This may affect the UI icon and feature set.')
		string(name: 'BRANCH',
		       defaultValue: 'master',
		       description: 'Used internally to make sure all downstream builds use the same commit.')
	}

	stages {
		stage('Build Windows') {
			steps {
				node('windows') {
					gitClone()
					windowsBuild()
					saveArtifacts()
				}
			}
		}

		stage('Build Linux') {
			steps {
				node('debian') {
					gitClone()
					unixBuild()
					saveArtifacts()
				}
			}
		}

		/* If we're on the main jobs, trigger each of the downstream jobs. */
		stage('Trigger downstream jobs') {
			when {
				expression {
					return env.JOB_BASE_NAME == '86Box-TestBuildPleaseIgnore';
				}
			}

			steps {
				script {
					["${env.JOB_BASE_NAME}2"].each {
						/* Set next build number for this job. */
						def job = Jenkins.instance.getItem(it)
						job.nextBuildNumber = env.BUILD_NUMBER
						job.saveNextBuildNumber()

						/* Trigger this job. */
						build propagate: false,
						      wait: false,
						      job: it,
						      parameters: [
							string(name: 'BUILD_TYPE', value: BUILD_TYPE),
							string(name: 'BRANCH', value: env.GIT_COMMIT)
						      ]
					}
				}
			}
		}
	}
}

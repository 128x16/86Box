Comparing files CPU\x86_ops_string.h and CPU_NEW\X86_OPS_STRING.H
***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { DI--; SI--; }
        else                { DI++; SI++; }
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { DI--; SI--; }
        else                          { DI++; SI++; }
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { EDI--; ESI--; }
        else                { EDI++; ESI++; }
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { EDI--; ESI--; }
        else                          { EDI++; ESI++; }
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { DI -= 2; SI -= 2; }
        else                { DI += 2; SI += 2; }
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { DI -= 2; SI -= 2; }
        else                          { DI += 2; SI += 2; }
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { EDI -= 2; ESI -= 2; }
        else                { EDI += 2; ESI += 2; }
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { EDI -= 2; ESI -= 2; }
        else                          { EDI += 2; ESI += 2; }
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { DI -= 4; SI -= 4; }
        else                { DI += 4; SI += 4; }
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { DI -= 4; SI -= 4; }
        else                          { DI += 4; SI += 4; }
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { EDI -= 4; ESI -= 4; }
        else                { EDI += 4; ESI += 4; }
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { EDI -= 4; ESI -= 4; }
        else                          { EDI += 4; ESI += 4; }
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { DI--; SI--; }
        else                { DI++; SI++; }
        CLOCK_CYCLES((is486) ? 8 : 10);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { DI--; SI--; }
        else                          { DI++; SI++; }
        CLOCK_CYCLES((is486) ? 8 : 10);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { EDI--; ESI--; }
        else                { EDI++; ESI++; }
        CLOCK_CYCLES((is486) ? 8 : 10);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { EDI--; ESI--; }
        else                          { EDI++; ESI++; }
        CLOCK_CYCLES((is486) ? 8 : 10);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { DI -= 2; SI -= 2; }
        else                { DI += 2; SI += 2; }
        CLOCK_CYCLES((is486) ? 8 : 10);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { DI -= 2; SI -= 2; }
        else                          { DI += 2; SI += 2; }
        CLOCK_CYCLES((is486) ? 8 : 10);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { EDI -= 2; ESI -= 2; }
        else                { EDI += 2; ESI += 2; }
        CLOCK_CYCLES((is486) ? 8 : 10);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { EDI -= 2; ESI -= 2; }
        else                          { EDI += 2; ESI += 2; }
        CLOCK_CYCLES((is486) ? 8 : 10);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { DI -= 4; SI -= 4; }
        else                { DI += 4; SI += 4; }
        CLOCK_CYCLES((is486) ? 8 : 10);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { DI -= 4; SI -= 4; }
        else                          { DI += 4; SI += 4; }
        CLOCK_CYCLES((is486) ? 8 : 10);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) { EDI -= 4; ESI -= 4; }
        else                { EDI += 4; ESI += 4; }
        CLOCK_CYCLES((is486) ? 8 : 10);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) { EDI -= 4; ESI -= 4; }
        else                          { EDI += 4; ESI += 4; }
        CLOCK_CYCLES((is486) ? 8 : 10);
*****

***** CPU\x86_ops_string.h
{
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememb(es, DI, AL);                  if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_STRING.H
{
        SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememb(es, DI, AL);                  if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI--;
        else                DI++;
        CLOCK_CYCLES(4);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI--;
        else                          DI++;
        CLOCK_CYCLES(4);
*****

***** CPU\x86_ops_string.h
{
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememb(es, EDI, AL);                 if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_STRING.H
{
        SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememb(es, EDI, AL);                 if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI--;
        else                EDI++;
        CLOCK_CYCLES(4);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI--;
        else                          EDI++;
        CLOCK_CYCLES(4);
*****

***** CPU\x86_ops_string.h
{
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememw(es, DI, AX);                  if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_STRING.H
{
        SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememw(es, DI, AX);                  if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI -= 2;
        else                DI += 2;
        CLOCK_CYCLES(4);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI -= 2;
        else                          DI += 2;
        CLOCK_CYCLES(4);
*****

***** CPU\x86_ops_string.h
{
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememw(es, EDI, AX);                 if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_STRING.H
{
        SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememw(es, EDI, AX);                 if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI -= 2;
        else                EDI += 2;
        CLOCK_CYCLES(4);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI -= 2;
        else                          EDI += 2;
        CLOCK_CYCLES(4);
*****

***** CPU\x86_ops_string.h
{
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememl(es, DI, EAX);                 if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_STRING.H
{
        SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememl(es, DI, EAX);                 if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI -= 4;
        else                DI += 4;
        CLOCK_CYCLES(4);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI -= 4;
        else                          DI += 4;
        CLOCK_CYCLES(4);
*****

***** CPU\x86_ops_string.h
{
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememl(es, EDI, EAX);                if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_STRING.H
{
        SEG_CHECK_WRITE(&cpu_state.seg_es);
        writememl(es, EDI, EAX);                if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI -= 4;
        else                EDI += 4;
        CLOCK_CYCLES(4);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI -= 4;
        else                          EDI += 4;
        CLOCK_CYCLES(4);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) SI--;
        else                SI++;
        CLOCK_CYCLES(5);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) SI--;
        else                          SI++;
        CLOCK_CYCLES(5);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) ESI--;
        else                ESI++;
        CLOCK_CYCLES(5);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) ESI--;
        else                          ESI++;
        CLOCK_CYCLES(5);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) SI -= 2;
        else                SI += 2;
        CLOCK_CYCLES(5);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) SI -= 2;
        else                          SI += 2;
        CLOCK_CYCLES(5);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) ESI -= 2;
        else                ESI += 2;
        CLOCK_CYCLES(5);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) ESI -= 2;
        else                          ESI += 2;
        CLOCK_CYCLES(5);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) SI -= 4;
        else                SI += 4;
        CLOCK_CYCLES(5);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) SI -= 4;
        else                          SI += 4;
        CLOCK_CYCLES(5);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) ESI -= 4;
        else                ESI += 4;
        CLOCK_CYCLES(5);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) ESI -= 4;
        else                          ESI += 4;
        CLOCK_CYCLES(5);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI--;
        else                DI++;
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI--;
        else                          DI++;
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI--;
        else                EDI++;
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI--;
        else                          EDI++;
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI -= 2;
        else                DI += 2;
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI -= 2;
        else                          DI += 2;
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI -= 2;
        else                EDI += 2;
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI -= 2;
        else                          EDI += 2;
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI -= 4;
        else                DI += 4;
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI -= 4;
        else                          DI += 4;
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI -= 4;
        else                EDI += 4;
        CLOCK_CYCLES(7);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI -= 4;
        else                          EDI += 4;
        CLOCK_CYCLES(7);
*****

***** CPU\x86_ops_string.h
        uint8_t temp;
                
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
***** CPU_NEW\X86_OPS_STRING.H
        uint8_t temp;

        SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI--;
        else                DI++;
        CLOCK_CYCLES(15);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI--;
        else                          DI++;
        CLOCK_CYCLES(15);
*****

***** CPU\x86_ops_string.h
        uint8_t temp;
                
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
***** CPU_NEW\X86_OPS_STRING.H
        uint8_t temp;

        SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI--;
        else                EDI++;
        CLOCK_CYCLES(15);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI--;
        else                          EDI++;
        CLOCK_CYCLES(15);
*****

***** CPU\x86_ops_string.h
        uint16_t temp;
                
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
***** CPU_NEW\X86_OPS_STRING.H
        uint16_t temp;

        SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI -= 2;
        else                DI += 2;
        CLOCK_CYCLES(15);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI -= 2;
        else                          DI += 2;
        CLOCK_CYCLES(15);
*****

***** CPU\x86_ops_string.h
        uint16_t temp;
                
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
***** CPU_NEW\X86_OPS_STRING.H
        uint16_t temp;

        SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI -= 2;
        else                EDI += 2;
        CLOCK_CYCLES(15);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI -= 2;
        else                          EDI += 2;
        CLOCK_CYCLES(15);
*****

***** CPU\x86_ops_string.h
        uint32_t temp;
                
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
***** CPU_NEW\X86_OPS_STRING.H
        uint32_t temp;

        SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) DI -= 4;
        else                DI += 4;
        CLOCK_CYCLES(15);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) DI -= 4;
        else                          DI += 4;
        CLOCK_CYCLES(15);
*****

***** CPU\x86_ops_string.h
        uint32_t temp;
                
                SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
***** CPU_NEW\X86_OPS_STRING.H
        uint32_t temp;

        SEG_CHECK_WRITE(&cpu_state.seg_es);
        check_io_perm(DX);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) EDI -= 4;
        else                EDI += 4;
        CLOCK_CYCLES(15);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) EDI -= 4;
        else                          EDI += 4;
        CLOCK_CYCLES(15);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) SI--;
        else                SI++;
        outb(DX, temp);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) SI--;
        else                          SI++;
        outb(DX, temp);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) ESI--;
        else                ESI++;
        outb(DX, temp);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) ESI--;
        else                          ESI++;
        outb(DX, temp);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) SI -= 2;
        else                SI += 2;
        outw(DX, temp);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) SI -= 2;
        else                          SI += 2;
        outw(DX, temp);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) ESI -= 2;
        else                ESI += 2;
        outw(DX, temp);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) ESI -= 2;
        else                          ESI += 2;
        outw(DX, temp);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) SI -= 4;
        else                SI += 4;
        outl(EDX, temp);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) SI -= 4;
        else                          SI += 4;
        outl(EDX, temp);
*****

***** CPU\x86_ops_string.h
        if (cpu_state.flags & D_FLAG) ESI -= 4;
        else                ESI += 4;
        outl(EDX, temp);
***** CPU_NEW\X86_OPS_STRING.H
        if (cpu_state.flags & D_FLAG) ESI -= 4;
        else                          ESI += 4;
        outl(EDX, temp);
*****


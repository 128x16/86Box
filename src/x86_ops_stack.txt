Comparing files CPU\x86_ops_stack.h and CPU_NEW\X86_OPS_STACK.H
***** CPU\x86_ops_stack.h

        fetch_ea_16(fetchdat); 
        if (cpu_mod != 3)
                SEG_CHECK_WRITE(cpu_state.ea_seg);              
        seteal(temp);
***** CPU_NEW\X86_OPS_STACK.H

        fetch_ea_16(fetchdat);        
        if (cpu_mod != 3)
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        seteal(temp);
*****

***** CPU\x86_ops_stack.h
                
PUSH_SEG_OPS(CS)
PUSH_SEG_OPS(DS)
PUSH_SEG_OPS(ES)
PUSH_SEG_OPS(FS)
PUSH_SEG_OPS(GS)
PUSH_SEG_OPS(SS)

POP_SEG_OPS(DS, &cpu_state.seg_ds)
POP_SEG_OPS(ES, &cpu_state.seg_es)
POP_SEG_OPS(FS, &cpu_state.seg_fs)
POP_SEG_OPS(GS, &cpu_state.seg_gs)

***** CPU_NEW\X86_OPS_STACK.H
                
PUSH_SEG_OPS(CS);
PUSH_SEG_OPS(DS);
PUSH_SEG_OPS(ES);
PUSH_SEG_OPS(FS);
PUSH_SEG_OPS(GS);
PUSH_SEG_OPS(SS);

POP_SEG_OPS(DS, &cpu_state.seg_ds);
POP_SEG_OPS(ES, &cpu_state.seg_es);
POP_SEG_OPS(FS, &cpu_state.seg_fs);
POP_SEG_OPS(GS, &cpu_state.seg_gs);

*****

***** CPU\x86_ops_stack.h
        temp_seg = POP_W();                     if (cpu_state.abrt) return 1;
        loadseg(temp_seg, &cpu_state.seg_ss);                if (cpu_state.abrt) { ESP = temp_esp; return 1; }
        CLOCK_CYCLES(is486 ? 3 : 7);
***** CPU_NEW\X86_OPS_STACK.H
        temp_seg = POP_W();                     if (cpu_state.abrt) return 1;
        loadseg(temp_seg, &cpu_state.seg_ss);   if (cpu_state.abrt) { ESP = temp_esp; return 1; }
        CLOCK_CYCLES(is486 ? 3 : 7);
*****

***** CPU\x86_ops_stack.h
        temp_seg = POP_L();                     if (cpu_state.abrt) return 1;
        loadseg(temp_seg & 0xffff, &cpu_state.seg_ss);       if (cpu_state.abrt) { ESP = temp_esp; return 1; }
        CLOCK_CYCLES(is486 ? 3 : 7);
***** CPU_NEW\X86_OPS_STACK.H
        temp_seg = POP_L();                     if (cpu_state.abrt) return 1;
        loadseg(temp_seg & 0xffff, &cpu_state.seg_ss); if (cpu_state.abrt) { ESP = temp_esp; return 1; }
        CLOCK_CYCLES(is486 ? 3 : 7);
*****


Comparing files CPU\x86_ops_shift.h and CPU_NEW\X86_OPS_SHIFT.H
***** CPU\x86_ops_shift.h
                        seteab(temp);      if (cpu_state.abrt) return 1;                     \
                        cpu_state.flags &= ~(C_FLAG | V_FLAG);                          \
                        if (temp & 1) cpu_state.flags |= C_FLAG;                        \
                        if ((temp ^ (temp >> 7)) & 1) cpu_state.flags |= V_FLAG;        \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                                 \
***** CPU_NEW\X86_OPS_SHIFT.H
                        seteab(temp);      if (cpu_state.abrt) return 1;                     \
                        set_flags_rotate(FLAGS_ROL8, temp);                             \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                                 \
*****

***** CPU\x86_ops_shift.h
                        temp = (temp >> (c & 7)) | (temp << (8-(c & 7)));               \
                        seteab(temp);      if (cpu_state.abrt) return 1;                     \
                        cpu_state.flags &= ~(C_FLAG | V_FLAG);                          \
                        if (temp & 0x80) cpu_state.flags |= C_FLAG;                     \
                        if ((temp ^ (temp >> 1)) & 0x40) cpu_state.flags |= V_FLAG;     \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                                 \
***** CPU_NEW\X86_OPS_SHIFT.H
                        temp = (temp >> (c & 7)) | (temp << (8-(c & 7)));               \
                        seteab(temp);      if (cpu_state.abrt) return 1;                \
                        set_flags_rotate(FLAGS_ROR8, temp);                             \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                                 \
*****

***** CPU\x86_ops_shift.h
                        PREFETCH_RUN((cpu_mod == 3) ? 3 : 7, 2, rmdat, (cpu_mod == 3) ? 0:1,0,(cpu_mod == 3) ? 0:1,0, ea32); \
                        break;                                                                                                 
                \
                        case 0x10: /*RCL b,CL*/                                         \
***** CPU_NEW\X86_OPS_SHIFT.H
                        PREFETCH_RUN((cpu_mod == 3) ? 3 : 7, 2, rmdat, (cpu_mod == 3) ? 0:1,0,(cpu_mod == 3) ? 0:1,0, ea32); \
                        break;                                                          \
                        case 0x10: /*RCL b,CL*/                                         \
*****

***** CPU\x86_ops_shift.h
                        seteaw(temp);      if (cpu_state.abrt) return 1;                \
                        cpu_state.flags &= ~(C_FLAG | V_FLAG);                          \
                        if (temp & 1) cpu_state.flags |= C_FLAG;                        \
                        if ((temp ^ (temp >> 15)) & 1) cpu_state.flags |= V_FLAG;       \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
***** CPU_NEW\X86_OPS_SHIFT.H
                        seteaw(temp);      if (cpu_state.abrt) return 1;                \
                        set_flags_rotate(FLAGS_ROL16, temp);                            \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
*****

***** CPU\x86_ops_shift.h
                        seteaw(temp);      if (cpu_state.abrt) return 1;                \
                        cpu_state.flags &= ~(C_FLAG | V_FLAG);                          \
                        if (temp & 0x8000) cpu_state.flags |= C_FLAG;                   \
                        if ((temp ^ (temp >> 1)) & 0x4000) cpu_state.flags |= V_FLAG;   \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
***** CPU_NEW\X86_OPS_SHIFT.H
                        seteaw(temp);      if (cpu_state.abrt) return 1;                \
                        set_flags_rotate(FLAGS_ROR16, temp);                            \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
*****

***** CPU\x86_ops_shift.h
                        seteal(temp);      if (cpu_state.abrt) return 1;                \
                        cpu_state.flags &= ~(C_FLAG | V_FLAG);                          \
                        if (temp & 1) cpu_state.flags |= C_FLAG;                        \
                        if ((temp ^ (temp >> 31)) & 1) cpu_state.flags |= V_FLAG;       \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
***** CPU_NEW\X86_OPS_SHIFT.H
                        seteal(temp);      if (cpu_state.abrt) return 1;                \
                        set_flags_rotate(FLAGS_ROL32, temp);                            \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
*****

***** CPU\x86_ops_shift.h
                        seteal(temp);      if (cpu_state.abrt) return 1;                \
                        cpu_state.flags &= ~(C_FLAG | V_FLAG);                          \
                        if (temp & 0x80000000) cpu_state.flags |= C_FLAG;               \
                        if ((temp ^ (temp >> 1)) & 0x40000000) cpu_state.flags |= V_FLAG;       \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
***** CPU_NEW\X86_OPS_SHIFT.H
                        seteal(temp);      if (cpu_state.abrt) return 1;                \
                        set_flags_rotate(FLAGS_ROR32, temp);                            \
                        CLOCK_CYCLES((cpu_mod == 3) ? 3 : 7);                           \
*****

***** CPU\x86_ops_shift.h
                count = getbyte() & 31;                                         \
                operation()                                                     \
                                                                                \
***** CPU_NEW\X86_OPS_SHIFT.H
                count = getbyte() & 31;                                         \
                operation();                                                    \
                                                                                \
*****

***** CPU\x86_ops_shift.h
                count = CL & 31;                                                \
                operation()                                                     \
                                                                                \
***** CPU_NEW\X86_OPS_SHIFT.H
                count = CL & 31;                                                \
                operation();                                                    \
                                                                                \
*****

***** CPU\x86_ops_shift.h
                count = getbyte() & 31;                                         \
                operation()                                                     \
                                                                                \
***** CPU_NEW\X86_OPS_SHIFT.H
                count = getbyte() & 31;                                         \
                operation();                                                    \
                                                                                \
*****

***** CPU\x86_ops_shift.h
                count = CL & 31;                                                \
                operation()                                                     \
                                                                                \
***** CPU_NEW\X86_OPS_SHIFT.H
                count = CL & 31;                                                \
                operation();                                                    \
                                                                                \
*****


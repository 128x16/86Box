Comparing files CPU\x86_ops_call.h and CPU_NEW\X86_OPS_CALL.H
***** CPU\x86_ops_call.h
        old_pc = cpu_state.pc;                                                  \
                oxpc = cpu_state.pc;                                                                                           
        \
        cpu_state.pc = new_pc;                                                  \
***** CPU_NEW\X86_OPS_CALL.H
        old_pc = cpu_state.pc;                                                  \
        cpu_state.pc = new_pc;                                                  \
*****

***** CPU\x86_ops_call.h
        cgate16 = cgate32 = 0;                                                  \
        if (msw & 1) loadcscall(new_seg);                                               \
        else                                                                    \
***** CPU_NEW\X86_OPS_CALL.H
        cgate16 = cgate32 = 0;                                                  \
        if (msw & 1) loadcscall(new_seg, old_pc);                               \
        else                                                                    \
*****

***** CPU\x86_ops_call.h
                uint32_t old_esp = ESP;                                         \
                PUSH_L(old_cs);                         if (cpu_state.abrt) { cgate16 = cgate32 = 0; return 1; }     \
                PUSH_L(old_pc);                         if (cpu_state.abrt) { ESP = old_esp; return 1; } \
        }                                                                       \
***** CPU_NEW\X86_OPS_CALL.H
                uint32_t old_esp = ESP;                                         \
                PUSH_L(old_cs);                         if (cpu_state.abrt) { CS = old_cs; cgate16 = cgate32 = 0; return 1; }  
   \
                PUSH_L(old_pc);                         if (cpu_state.abrt) { CS = old_cs; ESP = old_esp; return 1; } \
        }                                                                       \
*****

***** CPU\x86_ops_call.h
                uint32_t old_esp = ESP;                                         \
                PUSH_W(old_cs);                         if (cpu_state.abrt) { cgate16 = cgate32 = 0; return 1; }     \
                PUSH_W(old_pc);                         if (cpu_state.abrt) { ESP = old_esp; return 1; } \
        }
***** CPU_NEW\X86_OPS_CALL.H
                uint32_t old_esp = ESP;                                         \
                PUSH_W(old_cs);                         if (cpu_state.abrt) { CS = old_cs; cgate16 = cgate32 = 0; return 1; }  
   \
                PUSH_W(old_pc);                         if (cpu_state.abrt) { CS = old_cs; ESP = old_esp; return 1; } \
        }
*****

***** CPU\x86_ops_call.h
        old_pc = cpu_state.pc;                                                  \
                oxpc = cpu_state.pc;                                                                                           
        \
        cpu_state.pc = new_pc;                                                  \
***** CPU_NEW\X86_OPS_CALL.H
        old_pc = cpu_state.pc;                                                  \
        cpu_state.pc = new_pc;                                                  \
*****

***** CPU\x86_ops_call.h
        cgate16 = cgate32 = 0;                                                  \
        if (msw & 1) loadcscall(new_seg);                                               \
        else                                                                    \
***** CPU_NEW\X86_OPS_CALL.H
        cgate16 = cgate32 = 0;                                                  \
        if (msw & 1) loadcscall(new_seg, old_pc);                               \
        else                                                                    \
*****

***** CPU\x86_ops_call.h
                uint32_t old_esp = ESP;                                         \
                PUSH_W(old_cs);                         if (cpu_state.abrt) { cgate16 = cgate32 = 0; return 1; }     \
                PUSH_W(old_pc);                         if (cpu_state.abrt) { ESP = old_esp; return 1; } \
        }                                                                       \
***** CPU_NEW\X86_OPS_CALL.H
                uint32_t old_esp = ESP;                                         \
                PUSH_W(old_cs);                         if (cpu_state.abrt) { CS = old_cs; cgate16 = cgate32 = 0; return 1; }  
   \
                PUSH_W(old_pc);                         if (cpu_state.abrt) { CS = old_cs; ESP = old_esp; return 1; } \
        }                                                                       \
*****

***** CPU\x86_ops_call.h
                uint32_t old_esp = ESP;                                         \
                PUSH_L(old_cs);                         if (cpu_state.abrt) { cgate16 = cgate32 = 0; return 1; }     \
                PUSH_L(old_pc);                         if (cpu_state.abrt) { ESP = old_esp; return 1; } \
        }
***** CPU_NEW\X86_OPS_CALL.H
                uint32_t old_esp = ESP;                                         \
                PUSH_L(old_cs);                         if (cpu_state.abrt) { CS = old_cs; cgate16 = cgate32 = 0; return 1; }  
   \
                PUSH_L(old_pc);                         if (cpu_state.abrt) { CS = old_cs; ESP = old_esp; return 1; } \
        }
*****

***** CPU\x86_ops_call.h
                        SEG_CHECK_READ(cpu_state.ea_seg);
                oxpc = cpu_state.pc;
                new_pc = readmemw(easeg, cpu_state.eaaddr);
***** CPU_NEW\X86_OPS_CALL.H
                        SEG_CHECK_READ(cpu_state.ea_seg);
                old_pc = cpu_state.pc;
                new_pc = readmemw(easeg, cpu_state.eaaddr);
*****

***** CPU\x86_ops_call.h
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, oxpc);               if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
***** CPU_NEW\X86_OPS_CALL.H
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, old_pc);               if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
*****

***** CPU\x86_ops_call.h
                        SEG_CHECK_READ(cpu_state.ea_seg);
                oxpc = cpu_state.pc;
                new_pc = readmemw(easeg, cpu_state.eaaddr);
***** CPU_NEW\X86_OPS_CALL.H
                        SEG_CHECK_READ(cpu_state.ea_seg);
                old_pc = cpu_state.pc;
                new_pc = readmemw(easeg, cpu_state.eaaddr);
*****

***** CPU\x86_ops_call.h
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, oxpc);               if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
***** CPU_NEW\X86_OPS_CALL.H
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, old_pc);               if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
*****

***** CPU\x86_ops_call.h
                        SEG_CHECK_READ(cpu_state.ea_seg);
                oxpc = cpu_state.pc;
                new_pc = readmeml(easeg, cpu_state.eaaddr);
***** CPU_NEW\X86_OPS_CALL.H
                        SEG_CHECK_READ(cpu_state.ea_seg);
                old_pc = cpu_state.pc;
                new_pc = readmeml(easeg, cpu_state.eaaddr);
*****

***** CPU\x86_ops_call.h
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, oxpc);                if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
***** CPU_NEW\X86_OPS_CALL.H
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, old_pc);                if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
*****

***** CPU\x86_ops_call.h
                        SEG_CHECK_READ(cpu_state.ea_seg);
                oxpc = cpu_state.pc;
                new_pc = readmeml(easeg, cpu_state.eaaddr);
***** CPU_NEW\X86_OPS_CALL.H
                        SEG_CHECK_READ(cpu_state.ea_seg);
                old_pc = cpu_state.pc;
                new_pc = readmeml(easeg, cpu_state.eaaddr);
*****

***** CPU\x86_ops_call.h
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, oxpc);                if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
***** CPU_NEW\X86_OPS_CALL.H
                cpu_state.pc = new_pc;
                loadcsjmp(new_cs, old_pc);                if (cpu_state.abrt) return 1;
                CPU_BLOCK_END();
*****


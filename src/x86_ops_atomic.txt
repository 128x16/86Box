Comparing files CPU\x86_ops_atomic.h and CPU_NEW\X86_OPS_ATOMIC.H
***** CPU\x86_ops_atomic.h
        fetch_ea_16(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_16(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_32(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_32(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_16(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_16(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_32(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_32(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_16(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_16(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_32(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_32(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_16(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_16(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();
*****

***** CPU\x86_ops_atomic.h
        else
                cpu_state.flags &= ~Z_FLAG;        
        cycles -= (cpu_mod == 3) ? 6 : 10;
***** CPU_NEW\X86_OPS_ATOMIC.H
        else
                cpu_state.flags &= ~Z_FLAG;
        cycles -= (cpu_mod == 3) ? 6 : 10;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_32(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_32(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();
*****

***** CPU\x86_ops_atomic.h
        else
                cpu_state.flags &= ~Z_FLAG;        
        cycles -= (cpu_mod == 3) ? 6 : 10;
***** CPU_NEW\X86_OPS_ATOMIC.H
        else
                cpu_state.flags &= ~Z_FLAG;
        cycles -= (cpu_mod == 3) ? 6 : 10;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_16(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_16(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_32(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_32(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteab();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_16(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_16(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_32(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_32(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteaw();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_16(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_16(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_atomic.h
        fetch_ea_32(fetchdat);
                SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_ATOMIC.H
        fetch_ea_32(fetchdat);
        SEG_CHECK_WRITE(cpu_state.ea_seg);
        temp = geteal();                        if (cpu_state.abrt) return 1;
*****


Comparing files CPU\x86_ops_mul.h and CPU_NEW\X86_OPS_MUL.H
***** CPU\x86_ops_mul.h
                SEG_CHECK_READ(cpu_state.ea_seg);
                        
        tempw = geteaw();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
                SEG_CHECK_READ(cpu_state.ea_seg);

        tempw = geteaw();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
                SEG_CHECK_READ(cpu_state.ea_seg);
                        
        tempw = geteaw();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
                SEG_CHECK_READ(cpu_state.ea_seg);

        tempw = geteaw();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
                SEG_CHECK_READ(cpu_state.ea_seg);
        
        templ = geteal();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
                SEG_CHECK_READ(cpu_state.ea_seg);

        templ = geteal();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
                SEG_CHECK_READ(cpu_state.ea_seg);
        
        templ = geteal();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
                SEG_CHECK_READ(cpu_state.ea_seg);

        templ = geteal();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
                SEG_CHECK_READ(cpu_state.ea_seg);
        
        tempw = geteaw();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
                SEG_CHECK_READ(cpu_state.ea_seg);

        tempw = geteaw();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
                SEG_CHECK_READ(cpu_state.ea_seg);
        
        tempw = geteaw();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
                SEG_CHECK_READ(cpu_state.ea_seg);

        tempw = geteaw();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);               
                
        templ = geteal();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);

        templ = geteal();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);               
                
        templ = geteal();               if (cpu_state.abrt) return 1;
***** CPU_NEW\X86_OPS_MUL.H
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);

        templ = geteal();               if (cpu_state.abrt) return 1;
*****

***** CPU\x86_ops_mul.h
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);               
                
        templ = (int32_t)(int16_t)cpu_state.regs[cpu_reg].w * (int32_t)(int16_t)geteaw();
***** CPU_NEW\X86_OPS_MUL.H
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);

        templ = (int32_t)(int16_t)cpu_state.regs[cpu_reg].w * (int32_t)(int16_t)geteaw();
*****

***** CPU\x86_ops_mul.h
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);               
                
        temp64 = (int64_t)(int32_t)cpu_state.regs[cpu_reg].l * (int64_t)(int32_t)geteal();
***** CPU_NEW\X86_OPS_MUL.H
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);

        temp64 = (int64_t)(int32_t)cpu_state.regs[cpu_reg].l * (int64_t)(int32_t)geteal();
*****

***** CPU\x86_ops_mul.h
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);               
                
        temp64 = (int64_t)(int32_t)cpu_state.regs[cpu_reg].l * (int64_t)(int32_t)geteal();
***** CPU_NEW\X86_OPS_MUL.H
        if (cpu_mod != 3)
                SEG_CHECK_READ(cpu_state.ea_seg);

        temp64 = (int64_t)(int32_t)cpu_state.regs[cpu_reg].l * (int64_t)(int32_t)geteal();
*****

